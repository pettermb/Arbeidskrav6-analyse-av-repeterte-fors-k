
```{r}
#| label: "Load packages and data"
#| warning: false
#| message: false
#| echo: false
#| output: false



library(tidyverse); library(exscidata)
library(lme4)
## Import data set, extract leg lean mass per leg and remove observations
# that are include == "excl".

leanmass <- dxadata %>%
  select(participant:include, lean.left_leg, lean.right_leg) %>%
  pivot_longer(names_to = "leg", 
               values_to = "lean.mass", 
               cols = lean.left_leg:lean.right_leg) %>%
  mutate(leg = if_else(leg == "lean.left_leg", "L", "R"), 
         sets = if_else(multiple == leg, "multiple", "single")) %>%
  select(participant, time, sex, include, sets, leg, lean.mass) %>%
  filter(include == "incl") %>%
  
  ## Change levels for time and sets
  mutate(time = factor(time, levels = c("pre", "post")), 
         sets = factor(sets, levels = c("single", "multiple")), 
         leg = paste0(participant, leg)) %>%
  
  print()
```

```{r}
# Create a wide data set of change scores per volume condition
# suitable for a t-test
leanmass_change_wide <- leanmass %>%
  pivot_wider(names_from = time, values_from = lean.mass) %>%
  mutate(change = post - pre) %>%
  
  select(participant, sex, sets, change) %>%
  pivot_wider(names_from = sets, 
              values_from = change) %>%
  
  mutate(diff = multiple - single) %>%
  
  print()
leanmass_change_wide_time <- leanmass %>%
  pivot_wider(names_from = time, values_from = lean.mass) %>%

  select(participant, sex, sets, pre, post) %>%
  
  print()


```

```{r}
## Do a t-test on change scores per condition. 

## Alternatives (paired, equal variation)
tt1 <- with(leanmass_change_wide, t.test(multiple, single, paired = TRUE))

## The same model but with lm
m1 <- lm(diff ~ 1, data = leanmass_change_wide)

summary(m1)

```

```{r}
## Do a t-test on change scores per condition. 

## Alternatives (paired, equal variation)
tt1 <- with(leanmass_change_wide, t.test(multiple, single, paired = TRUE))

## The same model but with lm
m1 <- lm(diff ~ 1, data = leanmass_change_wide)

summary(m1)

```

```{r}
### Mixed effects model
# A mixed effects model allowing for a random slope for time is very similar 
# to the t-test used above. 

m2 <- lmer(lean.mass ~ time * sets +( 1 + time |participant), 
           data = leanmass)

# Check the summary 
summary(m2)
# Check assumptions of equal residual variance
plot(m2)

## Mixed-Effects ANCOVA

# The lm model does not contain information on multiple
# observations per participant
m3 <- lm(post ~ pre + sets, data = leanmass_change_wide_time)


# A more correct model also include random intercepts per 
# participant. Mixed effects ANCOVA mnodel:
m4 <- lmer(post ~ pre + sets + (1|participant), 
           data = leanmass_change_wide_time)


summary(m3)

summary(m4)

```

```{r}
### How to extract data from a model:

# m1 is a linear model of difference in differences
# we can use it for inference, extract average diff and confidence 
# intervals and p-value

# Save all elements of inline results
m1pval <- round(coef(summary(m1))[1, 4], 3)
m1est <- round(coef(summary(m1))[1, 1], 1)

m1ciu <- round(confint(m1)[1,2], 1)
m1cil <- round(confint(m1)[1,1], 1)

# Combine into an object
m1results <- paste0(m1est, 
                    ", 95% CI: [",
                    m1cil, 
                    ", ",
                    m1ciu, 
                    "], p = ",
                    m1pval
                    )

```


```{r}
## Time points in strength data set

strengthvolume %>%
  distinct(exercise)



## Exploratory plot of strength data 

str <- strengthvolume %>%
  filter(include == "incl") %>%
  mutate(time = factor(time, levels = c("pre", "session1", 
                                        "week2", "week5", 
                                        "week9", "post"))) %>%
  print()


str %>%
  ggplot(aes(time, 
             load, 
             group = paste(participant, sets), 
             color = sets)) + 
  geom_line() + 
  facet_wrap(~ exercise, scales = "free")
  
## How many measurements per participant

str %>%
  filter(!is.na(load)) %>%
  group_by(participant, exercise, sets) %>%
  summarise(n = n() ) %>%
  ggplot(aes(n, participant, color = sets)) +
  geom_point() + 
  facet_wrap(~ exercise) + 
  theme(axis.text.y = element_blank())



## Use pre and post data 
# Combine pre data prior to data analysis
# per exercise, leg, participant, and sets

str %>%
  mutate(time = if_else(time %in% c("pre", "session1"), "pre", time)) %>%
  
  filter(time %in% c("pre", "post")) %>%
  
  summarise(load = max(load, na.rm = TRUE), 
            .by = c(participant, 
                    sex, 
                    time, 
                    sets,
                    exercise,
                    leg)) %>%
  
  print()
```

